// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  email         String
  name          String
  // password      String
  profile       Profile?
  sentChats     Chat[]   @relation("SentChats")
  receivedChats Chat?    @relation("ReceivedChats")
  sentLikes     Like[]   @relation("SentLikes")
  receivedLikes Like?    @relation("ReceivedLikes")
}

model Profile {
  id          Int          @id @default(autoincrement())
  sex         Sex
  dateOfBirth DateTime
  profileText String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      Int          @unique
  human       Human?
  profileTag  ProfileTag[]
  photo       Photo[]
}

enum Sex {
  MALE
  FEMALE
}

model Human {
  id          Int      @id @default(autoincrement())
  sex         Sex
  dateOfBirth DateTime
  address     String
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  profileId   Int      @unique
}

model ProfileTag {
  id        Int     @id @default(autoincrement())
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  profileId Int     @unique
  tag       Tag     @relation(fields: [tagId], references: [id])
  tagId     Int     @unique
}

model Tag {
  id         Int          @id @default(autoincrement())
  tag        String
  profileTag ProfileTag[]
}

model Photo {
  id        Int     @id @default(autoincrement())
  photo     String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  profileId Int     @unique
}

model Chat {
  id          Int      @id @default(autoincrement())
  message     String
  time        DateTime @default(now())
  sender      User?    @relation("SentChats", fields: [senderId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  senderId    Int?     @unique
  recipient   User?    @relation("ReceivedChats", fields: [recipientId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  recipientId Int?     @unique
}

model Like {
  id          Int  @id @default(autoincrement())
  sender      User @relation("SentLikes", fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  senderId    Int  @unique
  recipient   User @relation("ReceivedLikes", fields: [recipientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  recipientId Int  @unique
}
